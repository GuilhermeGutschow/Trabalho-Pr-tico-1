import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;


public class TypingApplication extends JFrame implements KeyListener {
	
	private ArrayList <ArrayList <JButton>> buttonList = new ArrayList<ArrayList<JButton>> ();
	private Box verticalBox, textBox;
	private ArrayList <Box> horizontalBoxList = new ArrayList<Box> ();
	private JTextArea textArea = new JTextArea (7,1);
	private JTextArea pangramaTextArea = new JTextArea (1,1);
	private Color initialButtonColor = Color.WHITE;
	private JMenu historyMenu;
	
	private boolean shiftBeingPressed = false;
	private boolean capsPressed = false;
	
	private String currentPangrama;
	private boolean pangramaBeingUsed = false;
	private int erros = 0;
	private int acertos = 0;
	
	private JDesktopPane desktopPane;
	
	public TypingApplication () {
		super ("Typing Application");
		
		SetDesktopPane();
		SetTextAreas();
		SetBoxes ();
		SetButtonList ();
		AddButtonsToBoxes();
		
		BorderLayout borderLayout = new BorderLayout ();
		setLayout (borderLayout);
		
		add (textBox, BorderLayout.CENTER);
		add (verticalBox, BorderLayout.SOUTH);
		
		textArea.addKeyListener(this);
	}
	
	@Override
	public void keyPressed(KeyEvent event) {
		
		String keyText = KeyEvent.getKeyText(event.getKeyCode());

		keyText = GetRightKeyText (keyText);
		if (keyText != null) {
			ChangeColor (keyText, true);
			Write (keyText);
			if (pangramaBeingUsed) {
				CheckPangrama (keyText);
			}
		} else {
			try {
				throw new Exception ();
			} catch (Exception exception) {
				ShowException();
			}
		}
	}
	
	@Override
	public void keyReleased(KeyEvent event) {
		String keyText = KeyEvent.getKeyText(event.getKeyCode());
		if (keyText == "Shift") {
			shiftBeingPressed = false;
		}
		ChangeColor (GetRightKeyText (keyText), false);
	}
	
	private String GetRightKeyText (String keyText) {
		
		if (keyText == "Caps Lock") {
			keyText = "Caps";
		} else if (keyText == "Barra Invertida" || keyText == "Back Slash") {
			keyText = "\\";
		} else if (keyText == "Menos" || keyText == "Minus") {
			keyText = "-";
		} else if (keyText == "Igual" || keyText == "Equals") {
			keyText = "+";
		} else if (keyText == "Parêntese de Abertura" || keyText == "Open Bracket") {
			keyText = "[";
		} else if (keyText == "Parêntese de Fechamento" || keyText == "Close Bracket") {
			keyText = "]";
		}  else if (keyText == "Acima" || keyText == "Up") {
			keyText = "^";
		}  else if (keyText == "Esquerda" || keyText == "Left") {
			keyText = "<";
		}  else if (keyText == "Abaixo" || keyText == "Down") {
			keyText = "v";
		}  else if (keyText == "Direita" || keyText == "Right") {
			keyText = ">";
		}  else if (keyText == "Espaço" || keyText == "Space") {
			keyText = " ";
		}  else if (keyText == "Vírgula" || keyText == "Comma") {
			keyText = ",";
		}  else if (keyText == "Ponto Final" || keyText == "Period") {
			keyText = ".";
		}  else if (keyText == "Ponto-e-Vírgula" || keyText == "Semicolon") {
			keyText = ":";
		}  else if (keyText == "Guia") {
			keyText = "Tab";
		}  else if (keyText == "Til" || keyText == "Dead Tilde") {
			keyText = "~";
		} else if (keyText.equals("Desconhecido keyCode: 0x0") || keyText.equals("Unknown keyCode: 0x0")) {
			keyText = "?";
		} else if (shiftBeingPressed && keyText.equals("8")) {
			keyText = "*";
		}
		
		boolean rightSymbol = false;
		
		for (int i = 0; i < buttonList.size() && !rightSymbol; i ++) {
			for (int j = 0; j < buttonList.get(i).size() && !rightSymbol; j ++ ) {
				if (buttonList.get(i).get(j).getActionCommand().equals(keyText)){
					rightSymbol = true;
				}
			}
		}
		if (rightSymbol) {
			return (keyText);
		}
		return (null);
	}
	
	private void ChangeColor (String keyText, boolean turnOrange) {
		Color color = initialButtonColor;
		if (turnOrange) {
			color = Color.ORANGE;
		}
		
		boolean rightSymbol = false;
		int [] symbolPosition = new int [2];
		
		for (int i = 0; i < buttonList.size() && !rightSymbol; i ++) {
			for (int j = 0; j < buttonList.get(i).size() && !rightSymbol; j ++ ) {
				if (buttonList.get(i).get(j).getActionCommand().equals(keyText)){
					symbolPosition = new int [] {i,j};
					rightSymbol = true;
				}
			}
		}
		if (rightSymbol) {
			buttonList.get(symbolPosition[0]).get(symbolPosition[1]).setBackground(color);;
		}
	}
	
	private void Write (String symbol) {

		boolean done = false;
		
		if (symbol == "Backspace") {
			if (textArea.getText().length() != 0) {
				textArea.setText(textArea.getText().substring(0,textArea.getText().length() - 1));
			}
			done = true;
		} else if (symbol == "Shift") {
			shiftBeingPressed = true;
			done = true;
		} else if (symbol == "Caps") {
			capsPressed = !capsPressed;
			done = true;
		} else if (symbol == "Enter") {
			if (!pangramaBeingUsed) {
				AddToHistoryMenu (textArea.getText());
				textArea.setText("");
			}
			done = true;
		} else if (symbol == "Tab") {
			symbol = "   ";
		}
		
		if (!done) {
			if ((!capsPressed && !shiftBeingPressed) || (shiftBeingPressed && capsPressed)) {
				symbol = symbol.toLowerCase();
			}
			textArea.setText(textArea.getText() + symbol);
		}
	}
	
	private void CheckPangrama (String keyText) {
		int size = textArea.getText().length();
		if (keyText == "Backspace") {
			if (textArea.getText().regionMatches(0, currentPangrama, 0, size)) {
			}
			return;
		} if (keyText == "Enter") {
			EndUsageOfPangrama ();
			ChangeColor ("Enter", false);
			return;
		} if (keyText == "Shift" || keyText == "Control" || keyText == "Caps") {
			return;
		}
		
		if (textArea.getText().regionMatches(size-1, currentPangrama, size-1, 1)) {
			if (acertos < size) {
				acertos++;
			}
		} else {
			erros++;
		}
	}
	
	private void EndUsageOfPangrama () {
		JFrame pangramaJFrame = new JFrame ("Results");
		JLabel pangramaJLabel = new JLabel ();
		String firstText;
		if (textArea.getText().equals(currentPangrama)) {
			firstText = "A frase foi digitada corretamente.";
		} else {
			firstText = "A frase não foi digitada corretamente.";
		}
		pangramaJLabel.setText("<html>" + firstText + "<br/>Erros: " + erros + "<br/>Acertos: " + acertos + "</html>");
		pangramaJFrame.add(pangramaJLabel);
		pangramaJFrame.setSize (250,150);
		pangramaJFrame.setVisible(true);
		pangramaJFrame.setLocation(600, 100);
		
		acertos = 0;
		erros = 0;
		SetPangrama ("Teste sua habilidade escolhendo um pangrama.");
	}
	
	private void ShowException () {
		JFrame exceptionJFrame = new JFrame ("Exception");
		JLabel exceptionJLabel = new JLabel ("Tecla inválida.");
		exceptionJFrame.add(exceptionJLabel);
		exceptionJFrame.setSize (200,100);
		exceptionJFrame.setVisible(true);
		exceptionJFrame.setLocation(150, 70);
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}
	
	private void SetBoxes () {
	
		verticalBox = Box.createVerticalBox();
		Box box1 = Box.createHorizontalBox(), box2 = Box.createHorizontalBox(), box3 = Box.createHorizontalBox(),
				box4 = Box.createHorizontalBox(), box5 = Box.createHorizontalBox();
		
		horizontalBoxList.add(box1);
		horizontalBoxList.add(box2);
		horizontalBoxList.add(box3);
		horizontalBoxList.add(box4);
		horizontalBoxList.add(box5);

		for (int i = 0; i < horizontalBoxList.size(); i ++) {
			if (i != 0) {
				verticalBox.add(Box.createRigidArea(new Dimension (0,2)));
			}
			verticalBox.add(horizontalBoxList.get(i));
		}
		
		textBox = Box.createVerticalBox();
		textBox.add(textArea);
		textBox.add(pangramaTextArea);
	}
	
	private void SetDesktopPane () {
		desktopPane = new JDesktopPane();
		add(desktopPane); 

		JMenuBar bar = new JMenuBar();
		setJMenuBar(bar);
		JMenu pangramaMenu = new JMenu("Teste Pangrama");
		ArrayList <JMenuItem> frames = new ArrayList <JMenuItem> ();

		bar.add(pangramaMenu);
		
		frames.add(new JMenuItem("Um pequeno jabuti xereta viu dez cegonhas felizes"));
		frames.add(new JMenuItem("Quem traz CD, LP, fax, engov e whisky JB?"));
		frames.add(new JMenuItem("Gazeta publica hoje breve nota de faxina na quermesse."));
		frames.add(new JMenuItem("Jovem craque belga prediz falhas no xote."));
		frames.add(new JMenuItem("Bancos futeis pagavam-lhe queijo, whisky e xadrez."));
		
		for (int i = 0; i < frames.size(); i ++) {
			JMenuItem frame = frames.get(i);
			pangramaMenu.add(frame);
			frame.addActionListener(new ActionListener(){
					public void actionPerformed(ActionEvent e) {
						SetPangrama (frame.getText());
					}
				}
			);
		}
		
		JMenuItem resetFrame = new JMenuItem ("Reset");
		
		pangramaMenu.add(resetFrame);
		
		resetFrame.addActionListener(new ActionListener() {
				public void actionPerformed (ActionEvent e) {
					SetPangrama ("Teste sua habilidade escolhendo um pangrama.");
				}
			}
		);
		
		historyMenu = new JMenu ("Histórico");
		bar.add(historyMenu);
	}
	
	private void SetPangrama (String pangrama) {
		pangramaTextArea.setText(pangrama);
		if (pangrama != "Teste sua habilidade escolhendo um pangrama.") {
			currentPangrama = pangrama;
			pangramaBeingUsed = true;
			acertos = 0;
			erros = 0;
			
			AddToHistoryMenu (textArea.getText());
			textArea.setText("");
		} else {
			pangramaBeingUsed = false;
		}
	}
	
	private void AddToHistoryMenu (String text) {
		JMenuItem newJMenuItem = new JMenuItem (text);
		historyMenu.add(newJMenuItem, 0);
		newJMenuItem.addActionListener(new ActionListener(){
				public void actionPerformed (ActionEvent e) {
					if (!pangramaBeingUsed) {
						textArea.setText(newJMenuItem.getText());
					}
				}
			}
		);
	}
	
	
	private void SetTextAreas () {
		textArea.setFocusTraversalKeysEnabled(false);
		textArea.setEditable(false);
		textArea.setLineWrap(true);
		
		pangramaTextArea.setEditable(false);
		pangramaTextArea.setLineWrap(true);
		pangramaTextArea.setText("Teste sua habilidade escolhendo um pangrama.");
	}
	
	private void SetButtonList () {
		ArrayList <JButton> firstButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> secondButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> thirdButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> fourthButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> fifthButtonLine = new ArrayList<JButton> ();

		ArrayList <String> firstStringLine = new ArrayList <String> ();
		ArrayList <String> secondStringLine = new ArrayList <String> ();
		ArrayList <String> thirdStringLine = new ArrayList <String> ();
		ArrayList <String> fourthStringLine = new ArrayList <String> ();
		ArrayList <String> fifthStringLine = new ArrayList <String> ();
 
		firstStringLine.add("~");
		firstStringLine.add("1");
		firstStringLine.add("2");
		firstStringLine.add("3");
		firstStringLine.add("4");
		firstStringLine.add("5");
		firstStringLine.add("6");
		firstStringLine.add("7");
		firstStringLine.add("8");
		firstStringLine.add("9");
		firstStringLine.add("0");
		firstStringLine.add("-");
		firstStringLine.add("+");
		firstStringLine.add("Backspace");

		for (int i = 0; i < firstStringLine.size(); i++){
			firstButtonLine.add(new JButton (firstStringLine.get(i)));
		}
		
		initialButtonColor = firstButtonLine.get(0).getBackground();
		
		secondStringLine.add("Tab");
		secondStringLine.add("Q");
		secondStringLine.add("W");
		secondStringLine.add("E");
		secondStringLine.add("R");
		secondStringLine.add("T");
		secondStringLine.add("Y");
		
		secondStringLine.add("U");
		secondStringLine.add("I");
		secondStringLine.add("O");
		secondStringLine.add("P");
		secondStringLine.add("[");
		secondStringLine.add("]");
		secondStringLine.add("\\");
		
		for (int i = 0; i < secondStringLine.size(); i++){
			secondButtonLine.add(new JButton (secondStringLine.get(i)));
		}

		thirdStringLine.add("Caps");
		thirdStringLine.add("A");
		thirdStringLine.add("S");
		thirdStringLine.add("D");
		thirdStringLine.add("F");
		thirdStringLine.add("G");
		thirdStringLine.add("H");
		thirdStringLine.add("J");
		thirdStringLine.add("K");
		thirdStringLine.add("L");
		thirdStringLine.add(":");
		thirdStringLine.add("*");
		thirdStringLine.add("Enter");
		
		for (int i = 0; i < thirdStringLine.size(); i++){
			thirdButtonLine.add(new JButton (thirdStringLine.get(i)));
		}

		fourthStringLine.add("Shift");
		fourthStringLine.add("Z");
		fourthStringLine.add("X");
		fourthStringLine.add("C");
		fourthStringLine.add("V");
		fourthStringLine.add("B");
		fourthStringLine.add("N");
		fourthStringLine.add("M");
		fourthStringLine.add(",");
		fourthStringLine.add(".");
		fourthStringLine.add("?");
		fourthStringLine.add("^");
		
		for (int i = 0; i < fourthStringLine.size(); i++){
			fourthButtonLine.add(new JButton (fourthStringLine.get(i)));
		}
		
		fifthStringLine.add(" ");
		fifthStringLine.add("<");
		fifthStringLine.add("v");
		fifthStringLine.add(">");

		for (int i = 0; i < fifthStringLine.size(); i++){
			fifthButtonLine.add(new JButton (fifthStringLine.get(i)));
		}
		
		fifthButtonLine.get(0).setMinimumSize(new Dimension (300,2));
		fifthButtonLine.get(0).setPreferredSize(new Dimension (300,2));
		
		buttonList.add(firstButtonLine);
		buttonList.add(secondButtonLine);
		buttonList.add(thirdButtonLine);
		buttonList.add(fourthButtonLine);
		buttonList.add(fifthButtonLine);
	}
	
	private void AddButtonsToBoxes () {

		for (int i = 0; i < buttonList.size(); i ++) {
			if (i == 4) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (200,0)));
			}
			for (int j = 0; j < buttonList.get(i).size(); j ++) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (2,0)));
				if (i == 3 && j == buttonList.get(i).size() - 1) {
					horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (10,0)));
				} else if (i == 4 && j == 1) {
					horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (37,0)));					
				}
				horizontalBoxList.get(i).add(buttonList.get(i).get(j));
			}
			if (i == 4) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (300,0)));					
			}
			
		}
	}

	public static void main (String args []) {
		TypingApplication typingApplication = new TypingApplication ();
		typingApplication.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		typingApplication.setSize(750, 300);
		typingApplication.setVisible(true);
	}	
}
