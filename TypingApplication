import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;


public class TypingApplication extends JFrame implements KeyListener {
	
	private ArrayList <ArrayList <JButton>> buttonList = new ArrayList<ArrayList<JButton>> ();
	private Box verticalBox;
	private ArrayList <Box> horizontalBoxList = new ArrayList<Box> ();
	private JTextArea textArea = new JTextArea (7,1);
	private Color initialButtonColor = Color.WHITE;
	private ArrayList <String> textHistory = new ArrayList <String> ();
	
	private boolean shiftBeingPressed = false;
	private boolean capsPressed = false;
	
	public TypingApplication () {
		super ("Typing Application");
		textArea.setFocusTraversalKeysEnabled(false);
		BorderLayout borderLayout = new BorderLayout ();
		setLayout (borderLayout);
		
		SetBoxes ();
		SetButtonList ();
		AddButtonsToBoxes();
		
		/*JPanel jPanel1 = new JPanel ();
		jPanel1.add(verticalBox);
		add (jPanel1, BorderLayout.SOUTH);
		*/
		
		add (verticalBox, BorderLayout.SOUTH);
		
		textArea.setEditable(false);
		add (textArea, BorderLayout.CENTER);
		
		textArea.addKeyListener(this);
	}
	
	@Override // trata pressionamento de qualquer tecla
	public void keyPressed(KeyEvent event) {
		
		String keyText = KeyEvent.getKeyText(event.getKeyCode());
		
		System.out.println(keyText);
		
		keyText = GetRightKeyText (keyText);
		if (keyText != null) {
			ChangeColor (keyText, true);
			Write (keyText);
		}
	}
	
	@Override
	public void keyReleased(KeyEvent event) {
		String keyText = KeyEvent.getKeyText(event.getKeyCode());
		if (keyText == "Shift") {
			shiftBeingPressed = false;
		}
		ChangeColor (GetRightKeyText (keyText), false);
	}
	
	private String GetRightKeyText (String keyText) {
		
		if (keyText == "Caps Lock") {
			keyText = "Caps";
		} else if (keyText == "Barra Invertida") {
			keyText = "\\";
		} else if (keyText == "Menos") {
			keyText = "-";
		} else if (keyText == "Igual") {
			keyText = "+";
		} else if (keyText == "Parêntese de Abertura") {
			keyText = "[";
		} else if (keyText == "Parêntese de Fechamento") {
			keyText = "]";
		}  else if (keyText == "Acima") {
			keyText = "^";
		}  else if (keyText == "Esquerda") {
			keyText = "<";
		}  else if (keyText == "Abaixo") {
			keyText = "v";
		}  else if (keyText == "Direita") {
			keyText = ">";
		}  else if (keyText == "Espaço") {
			keyText = " ";
		}  else if (keyText == "Vírgula") {
			keyText = ",";
		}  else if (keyText == "Ponto Final") {
			keyText = ".";
		}  else if (keyText == "Ponto-e-Vírgula") {
			keyText = ":";
		}  else if (keyText == "Guia") {
			keyText = "Tab";
		} 
		
		boolean rightSymbol = false;
		
		for (int i = 0; i < buttonList.size() && !rightSymbol; i ++) {
			for (int j = 0; j < buttonList.get(i).size() && !rightSymbol; j ++ ) {
				if (buttonList.get(i).get(j).getActionCommand().equals(keyText)){
					rightSymbol = true;
				}
			}
		}
		if (rightSymbol) {
			return (keyText);
		}
		return (null);
	}
	
	private void ChangeColor (String keyText, boolean turnOrange) {
		Color color = initialButtonColor;
		if (turnOrange) {
			color = Color.ORANGE;
		}
		
		boolean rightSymbol = false;
		int [] symbolPosition = new int [2];
		
		for (int i = 0; i < buttonList.size() && !rightSymbol; i ++) {
			for (int j = 0; j < buttonList.get(i).size() && !rightSymbol; j ++ ) {
				if (buttonList.get(i).get(j).getActionCommand().equals(keyText)){
					symbolPosition = new int [] {i,j};
					rightSymbol = true;
				}
			}
		}
		//Classe diamensoes.
		if (rightSymbol) {
			buttonList.get(symbolPosition[0]).get(symbolPosition[1]).setBackground(color);;
		}
	}
	
	private void Write (String symbol) {

		boolean done = false;
		
		if (symbol == "Backspace") {
			if (textArea.getText().length() != 0) {
				textArea.setText(textArea.getText().substring(0,textArea.getText().length() - 1));
			}
			done = true;
		} else if (symbol == "Shift") {
			shiftBeingPressed = true;
			done = true;
		} else if (symbol == "Ctrl"){
			done = true;
		} else if (symbol == "Caps") {
			capsPressed = !capsPressed;
			done = true;
		} else if (symbol == "Enter") {
			textHistory.add(textArea.getText());
			textArea.setText("");
			done = true;
		} else if (symbol == "Tab") {
			symbol = "   ";
		}
		
		if (!done) {
			if ((!capsPressed && !shiftBeingPressed) || (shiftBeingPressed && capsPressed)) {
				symbol = symbol.toLowerCase();
			}
			textArea.setText(textArea.getText() + symbol);
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}
	
	private void SetBoxes () {
	
		verticalBox = Box.createVerticalBox();
		Box box1 = Box.createHorizontalBox(), box2 = Box.createHorizontalBox(), box3 = Box.createHorizontalBox(),
				box4 = Box.createHorizontalBox(), box5 = Box.createHorizontalBox();
		
		horizontalBoxList.add(box1);
		horizontalBoxList.add(box2);
		horizontalBoxList.add(box3);
		horizontalBoxList.add(box4);
		horizontalBoxList.add(box5);

		for (int i = 0; i < horizontalBoxList.size(); i ++) {
			if (i != 0) {
				verticalBox.add(Box.createRigidArea(new Dimension (0,2)));
			}
			verticalBox.add(horizontalBoxList.get(i));
		}
	}
	
	private void SetButtonList () {
		ArrayList <JButton> firstButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> secondButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> thirdButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> fourthButtonLine = new ArrayList<JButton> ();
		ArrayList <JButton> fifthButtonLine = new ArrayList<JButton> ();

		ArrayList <String> firstStringLine = new ArrayList <String> ();
		ArrayList <String> secondStringLine = new ArrayList <String> ();
		ArrayList <String> thirdStringLine = new ArrayList <String> ();
		ArrayList <String> fourthStringLine = new ArrayList <String> ();
		ArrayList <String> fifthStringLine = new ArrayList <String> ();
 
		firstStringLine.add("~");
		firstStringLine.add("1");
		firstStringLine.add("2");
		firstStringLine.add("3");
		firstStringLine.add("4");
		firstStringLine.add("5");
		firstStringLine.add("6");
		firstStringLine.add("7");
		firstStringLine.add("8");
		firstStringLine.add("9");
		firstStringLine.add("0");
		firstStringLine.add("-");
		firstStringLine.add("+");
		firstStringLine.add("Backspace");

		for (int i = 0; i < firstStringLine.size(); i++){
			firstButtonLine.add(new JButton (firstStringLine.get(i)));
		}
		
		initialButtonColor = firstButtonLine.get(0).getBackground();
		
		secondStringLine.add("Tab");
		secondStringLine.add("Q");
		secondStringLine.add("W");
		secondStringLine.add("E");
		secondStringLine.add("R");
		secondStringLine.add("T");
		secondStringLine.add("Y");
		
		secondStringLine.add("U");
		secondStringLine.add("I");
		secondStringLine.add("O");
		secondStringLine.add("P");
		secondStringLine.add("[");
		secondStringLine.add("]");
		secondStringLine.add("\\");
		
		for (int i = 0; i < secondStringLine.size(); i++){
			secondButtonLine.add(new JButton (secondStringLine.get(i)));
		}

		thirdStringLine.add("Caps");
		thirdStringLine.add("A");
		thirdStringLine.add("S");
		thirdStringLine.add("D");
		thirdStringLine.add("F");
		thirdStringLine.add("G");
		thirdStringLine.add("H");
		thirdStringLine.add("J");
		thirdStringLine.add("K");
		thirdStringLine.add("L");
		thirdStringLine.add(":");
		thirdStringLine.add("*");
		thirdStringLine.add("Enter");
		
		for (int i = 0; i < thirdStringLine.size(); i++){
			thirdButtonLine.add(new JButton (thirdStringLine.get(i)));
		}

		fourthStringLine.add("Shift");
		fourthStringLine.add("Z");
		fourthStringLine.add("X");
		fourthStringLine.add("C");
		fourthStringLine.add("V");
		fourthStringLine.add("B");
		fourthStringLine.add("N");
		fourthStringLine.add("M");
		fourthStringLine.add(",");
		fourthStringLine.add(".");
		fourthStringLine.add("?");
		fourthStringLine.add("^");
		
		for (int i = 0; i < fourthStringLine.size(); i++){
			fourthButtonLine.add(new JButton (fourthStringLine.get(i)));
		}
		
		fifthStringLine.add(" ");
		fifthStringLine.add("<");
		fifthStringLine.add("v");
		fifthStringLine.add(">");

		for (int i = 0; i < fifthStringLine.size(); i++){
			fifthButtonLine.add(new JButton (fifthStringLine.get(i)));
		}
		
		fifthButtonLine.get(0).setMinimumSize(new Dimension (300,2));
		fifthButtonLine.get(0).setPreferredSize(new Dimension (300,2));
		
		buttonList.add(firstButtonLine);
		buttonList.add(secondButtonLine);
		buttonList.add(thirdButtonLine);
		buttonList.add(fourthButtonLine);
		buttonList.add(fifthButtonLine);
	}
	
	private void AddButtonsToBoxes () {

		for (int i = 0; i < buttonList.size(); i ++) {
			if (i == 4) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (200,0)));
			}
			for (int j = 0; j < buttonList.get(i).size(); j ++) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (2,0)));
				if (i == 3 && j == buttonList.get(i).size() - 1) {
					horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (10,0)));
				} else if (i == 4 && j == 1) {
					horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (37,0)));					
				}
				horizontalBoxList.get(i).add(buttonList.get(i).get(j));
			}
			if (i == 4) {
				horizontalBoxList.get(i).add(Box.createRigidArea(new Dimension (300,0)));					
			}
			
		}
	}

	public static void main (String args []) {
		TypingApplication typingApplication = new TypingApplication ();
		typingApplication.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		typingApplication.setSize(750, 300);
		typingApplication.setVisible(true);
	}	
}
